{
  "openapi": "3.1.0",
  "info": {
    "title": "MorphVM API",
    "description": "REST API for managing MorphVM instances and snapshots.",
    "version": "0.1.0"
  },
  "paths": {
    "/image": {
      "get": {
        "tags": ["Images"],
        "summary": "List Images",
        "description": "List available images for creating snapshots.",
        "operationId": "list_images_image_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageModelCollection"
                }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/image/{image_id}/boot": {
      "post": {
        "tags": ["Images"],
        "summary": "Boot Image",
        "description": "Boot an instance from a specified image.",
        "operationId": "boot_image_image__image_id__boot_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "image_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Image Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BootInstanceFromImageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InstanceModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/snapshot": {
      "post": {
        "tags": ["Snapshots"],
        "summary": "Create Snapshot",
        "description": "Create a snapshot from an image.\n\nSnapshots are point-in-time copies of a running instance that can be used to create new instances.",
        "operationId": "create_snapshot_snapshot_post",
        "security": [{ "HTTPBearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateSnapshotRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SnapshotModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Snapshots"],
        "summary": "List Snapshots",
        "description": "List snapshots.",
        "operationId": "list_snapshots_snapshot_get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Digest"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": { "type": "string" }
            },
            "description": "metadata[...] query parameters for filtering snapshots",
            "style": "deepObject",
            "explode": true,
            "example": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotModelCollection"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/snapshot/{snapshot_id}": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get Snapshot",
        "description": "Get a snapshot by ID.",
        "operationId": "get_snapshot_snapshot__snapshot_id__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "snapshot_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Snapshot Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SnapshotModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Snapshots"],
        "summary": "Delete Snapshot",
        "description": "Delete a snapshot by ID.",
        "operationId": "delete_snapshot_snapshot__snapshot_id__delete",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "snapshot_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Snapshot Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/snapshot/{snapshot_id}/metadata": {
      "post": {
        "tags": ["Snapshots"],
        "summary": "Set Snapshot Metadata",
        "description": "Set metadata for a snapshot.",
        "operationId": "set_snapshot_metadata_snapshot__snapshot_id__metadata_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "snapshot_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Snapshot Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": { "type": "string" },
                "title": "Metadata"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SnapshotModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/instance": {
      "get": {
        "tags": ["Instances"],
        "summary": "List Instances",
        "description": "List instances.",
        "operationId": "list_instances_instance_get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "metadata",
            "in": "query",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": { "type": "string" }
            },
            "description": "metadata[...] query parameters for filtering instances",
            "style": "deepObject",
            "explode": true,
            "example": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceModelCollection"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Instances"],
        "summary": "Start Instance",
        "description": "Start a new instance from a snapshot.",
        "operationId": "start_instance_instance_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "snapshot_id",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Snapshot Id" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  { "$ref": "#/components/schemas/StartInstanceRequest" },
                  { "type": "null" }
                ],
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InstanceModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/instance/{instance_id}": {
      "get": {
        "tags": ["Instances"],
        "summary": "Get Instance",
        "description": "Get an instance by ID.",
        "operationId": "get_instance_instance__instance_id__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Instance Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InstanceModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Instances"],
        "summary": "Stop Instance",
        "description": "Stop and delete an instance by ID.",
        "operationId": "stop_instance_instance__instance_id__delete",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Instance Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/instance/{instance_id}/snapshot": {
      "post": {
        "tags": ["Instances"],
        "summary": "Snapshot Instance",
        "description": "Create a snapshot from an instance.",
        "operationId": "snapshot_instance_instance__instance_id__snapshot_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Instance Id" }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Digest"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  { "$ref": "#/components/schemas/SnapshotInstanceRequest" },
                  { "type": "null" }
                ],
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SnapshotModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/instance/{instance_id}/branch": {
      "post": {
        "tags": ["Instances"],
        "summary": "Branch Instance",
        "description": "Branch an instance into multiple instances creating a new snapshot.",
        "operationId": "branch_instance_instance__instance_id__branch_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Instance Id" }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Count" }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Digest"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  { "$ref": "#/components/schemas/BranchInstanceRequest" },
                  { "type": "null" }
                ],
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BranchInstanceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/instance/{instance_id}/ssh/key": {
      "get": {
        "tags": ["Instances"],
        "summary": "Get Ssh Key",
        "description": "Get the SSH key pair for an instance.",
        "operationId": "get_ssh_key_instance__instance_id__ssh_key_get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Instance Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InstanceSshKey" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Instances"],
        "summary": "Rotate Ssh Key",
        "description": "Rotate the SSH key pair for an instance.",
        "operationId": "rotate_ssh_key_instance__instance_id__ssh_key_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Instance Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InstanceSshKey" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/instance/{instance_id}/http": {
      "post": {
        "tags": ["Instances"],
        "summary": "Expose Http Service",
        "description": "Expose an HTTP service on an instance.",
        "operationId": "expose_http_service_instance__instance_id__http_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Instance Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExposeHttpServiceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InstanceModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/instance/{instance_id}/http/{service_name}": {
      "delete": {
        "tags": ["Instances"],
        "summary": "Hide Http Service",
        "description": "Hide an HTTP service on an instance.",
        "operationId": "hide_http_service_instance__instance_id__http__service_name__delete",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Instance Id" }
          },
          {
            "name": "service_name",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Service Name" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InstanceModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/instance/{instance_id}/exec": {
      "post": {
        "tags": ["Instances"],
        "summary": "Exec",
        "description": "Execute a shell command inside a VM via SSH (AsyncSSH backend).",
        "operationId": "exec_instance__instance_id__exec_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Instance Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ExecRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ExecResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/instance/{instance_id}/exec/sse": {
      "post": {
        "tags": ["Instances"],
        "summary": "Exec Sse",
        "operationId": "exec_sse_instance__instance_id__exec_sse_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Instance Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ExecRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Server-Sent Event stream",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "example": "data: {\"type\":\"stdout\",\"content\":\"hello\"}\\n\\ndata: {\"type\":\"exit_code\",\"content\":0}\\n\\n"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/instance/{instance_id}/metadata": {
      "post": {
        "tags": ["Instances"],
        "summary": "Set Instance Metadata",
        "description": "Set metadata for an instance.",
        "operationId": "set_instance_metadata_instance__instance_id__metadata_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Instance Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": { "type": "string" },
                "title": "Metadata"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InstanceModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/instance/{instance_id}/ttl": {
      "post": {
        "tags": ["Instances"],
        "summary": "Update Instance Ttl",
        "description": "Update the TTL (Time To Live) for an instance.",
        "operationId": "update_instance_ttl_instance__instance_id__ttl_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Instance Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateTTLRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InstanceModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/instance/{instance_id}/wake-on": {
      "post": {
        "tags": ["Instances"],
        "summary": "Update Instance Wake On",
        "description": "Update the wake-on-request settings for an instance.",
        "operationId": "update_instance_wake_on_instance__instance_id__wake_on_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Instance Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateWakeRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InstanceModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/instance/{instance_id}/reboot": {
      "post": {
        "tags": ["Instances"],
        "summary": "Reboot Instance",
        "description": "Restart an instance.",
        "operationId": "reboot_instance_instance__instance_id__reboot_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Instance Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InstanceModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/snapshot/{snapshot_id}/boot": {
      "post": {
        "tags": ["Instances"],
        "summary": "Boot Instance",
        "description": "Boot an instance from a snapshot.",
        "operationId": "boot_instance_snapshot__snapshot_id__boot_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "snapshot_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Snapshot Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BootInstanceRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InstanceModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/snapshot/{snapshot_id}/token": {
      "post": {
        "tags": ["Snapshots"],
        "summary": "Create Snapshot Token",
        "description": "Generate a stateless token for sharing a snapshot.",
        "operationId": "create_snapshot_token_snapshot__snapshot_id__token_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "snapshot_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Snapshot Id" }
          },
          {
            "name": "expires_in",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 86400,
              "minimum": 60,
              "description": "Token expiration in seconds (default 1 hour)",
              "default": 3600,
              "title": "Expires In"
            },
            "description": "Token expiration in seconds (default 1 hour)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSnapshotTokenResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/snapshot/pull": {
      "post": {
        "tags": ["Snapshots"],
        "summary": "Pull Snapshot",
        "description": "Pull a snapshot using a sharing token.",
        "operationId": "pull_snapshot_snapshot_pull_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Snapshot sharing token",
              "title": "Token"
            },
            "description": "Snapshot sharing token"
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Digest"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": { "type": "string" }
                  },
                  { "type": "null" }
                ],
                "title": "Metadata"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SnapshotModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/instance/{instance_id}/pause": {
      "post": {
        "tags": ["Instances"],
        "summary": "Pause Instance",
        "description": "Pause an instance.",
        "operationId": "pause_instance_instance__instance_id__pause_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Instance Id" }
          },
          {
            "name": "snapshot",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "description": "Whether to create a snapshot before pausing the instance. Defaults to true.",
              "title": "Snapshot"
            },
            "description": "Whether to create a snapshot before pausing the instance. Defaults to true."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InstanceModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/instance/{instance_id}/resume": {
      "post": {
        "tags": ["Instances"],
        "summary": "Resume Instance",
        "description": "Resume a paused instance.",
        "operationId": "resume_instance_instance__instance_id__resume_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Instance Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InstanceModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/user/api-key": {
      "get": {
        "tags": ["API Keys"],
        "summary": "List Api Keys",
        "description": "List all active API keys for the authenticated user.",
        "operationId": "list_api_keys_user_api_key_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKeyModelCollection"
                }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["API Keys"],
        "summary": "Create Api Key",
        "description": "Create a new API key for the authenticated user.",
        "operationId": "create_api_key_user_api_key_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAPIKeyResponse"
                }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/user/api-key/{api_key_id}": {
      "delete": {
        "tags": ["API Keys"],
        "summary": "Delete Api Key",
        "description": "Delete an API key.",
        "operationId": "delete_api_key_user_api_key__api_key_id__delete",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "api_key_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Api Key Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/user/ssh-key": {
      "get": {
        "tags": ["SSH Keys"],
        "summary": "Get User Ssh Key",
        "description": "Get the current user's SSH public key.",
        "operationId": "get_user_ssh_key_user_ssh_key_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserSSHKeyModel" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "put": {
        "tags": ["SSH Keys"],
        "summary": "Update User Ssh Key",
        "description": "Update the current user's SSH public key.",
        "operationId": "update_user_ssh_key_user_ssh_key_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateSSHKeyRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserSSHKeyModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/user/usage": {
      "get": {
        "tags": ["Usage"],
        "summary": "Get User Usage",
        "description": "Same outward-facing behaviour as the original implementation, but most of the\nheavy work is now performed inside Postgres instead of in Python.",
        "operationId": "get_user_usage_user_usage_get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "interval",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "default": "3h", "title": "Interval" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUsageOverviewModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "APIKeyModel": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "key_prefix": { "type": "string", "title": "Key Prefix" },
          "created": { "type": "integer", "title": "Created" },
          "last_used": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Last Used"
          }
        },
        "type": "object",
        "required": ["id", "key_prefix", "created"],
        "title": "APIKey"
      },
      "APIKeyModelCollection": {
        "properties": {
          "object": {
            "type": "string",
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "data": {
            "items": { "$ref": "#/components/schemas/APIKeyModel" },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "APIKeyList"
      },
      "BootInstanceFromImageRequest": {
        "properties": {
          "vcpus": {
            "type": "integer",
            "title": "Vcpus",
            "description": "Number of vCPUs",
            "default": 1
          },
          "memory": {
            "type": "integer",
            "title": "Memory",
            "description": "Memory in MB",
            "default": 128
          },
          "disk_size": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Disk Size",
            "description": "Size of the disk in MB. If not provided, defaults to the image's disk size."
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": { "type": "string" },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Metadata",
            "description": "Set of key-value pairs for storing additional information"
          },
          "ttl_seconds": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Ttl Seconds",
            "description": "Time to live in seconds for the instance. If not provided, the instance will not expire."
          },
          "ttl_action": {
            "anyOf": [
              { "type": "string", "enum": ["stop", "pause"] },
              { "type": "null" }
            ],
            "title": "Ttl Action",
            "description": "Action to take when the instance expires. If not provided, the instance will not expire."
          }
        },
        "type": "object",
        "title": "BootInstanceFromImageRequest"
      },
      "BootInstanceRequest": {
        "properties": {
          "vcpus": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Vcpus"
          },
          "memory": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Memory"
          },
          "disk_size": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Disk Size"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": { "type": "string" },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Metadata"
          },
          "ttl_seconds": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Ttl Seconds",
            "description": "Time to live in seconds for the instance"
          },
          "ttl_action": {
            "anyOf": [
              { "type": "string", "enum": ["stop", "pause"] },
              { "type": "null" }
            ],
            "title": "Ttl Action",
            "description": "Action to take when the instance expires. Defaults to 'stop'."
          }
        },
        "type": "object",
        "title": "BootInstanceRequest"
      },
      "BranchInstanceRequest": {
        "properties": {
          "snapshot_metadata": {
            "anyOf": [
              {
                "additionalProperties": { "type": "string" },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Snapshot Metadata",
            "description": "Metadata for the new snapshot"
          },
          "instance_metadata": {
            "anyOf": [
              {
                "additionalProperties": { "type": "string" },
                "type": "object"
              },
              {
                "items": {
                  "additionalProperties": { "type": "string" },
                  "type": "object"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Instance Metadata",
            "description": "Metadata for the new instances. If a list is provided, each instance will have the corresponding metadata."
          }
        },
        "type": "object",
        "title": "BranchInstanceRequest",
        "examples": [{ "instance_metadata": {}, "snapshot_metadata": {} }]
      },
      "BranchInstanceResponse": {
        "properties": {
          "snapshot": { "$ref": "#/components/schemas/SnapshotModel" },
          "instances": {
            "items": { "$ref": "#/components/schemas/InstanceModel" },
            "type": "array",
            "title": "Instances"
          }
        },
        "type": "object",
        "required": ["snapshot", "instances"],
        "title": "BranchInstanceResponse"
      },
      "CreateAPIKeyResponse": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "key": { "type": "string", "title": "Key" },
          "key_prefix": { "type": "string", "title": "Key Prefix" },
          "created": { "type": "integer", "title": "Created" }
        },
        "type": "object",
        "required": ["id", "key", "key_prefix", "created"],
        "title": "CreateAPIKeyResponse"
      },
      "CreateSnapshotRequest": {
        "properties": {
          "image_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Image Id",
            "description": "ID of the base image to use.",
            "default": "morphvm-minimal"
          },
          "readiness_check": {
            "anyOf": [
              { "$ref": "#/components/schemas/TimeoutCheck" },
              { "type": "null" }
            ],
            "description": "Configuration for checking instance readiness. Can be either a timeout-based check or an HTTP-based check."
          },
          "vcpus": {
            "type": "integer",
            "title": "Vcpus",
            "description": "Number of vCPUs",
            "default": 1
          },
          "memory": {
            "type": "integer",
            "title": "Memory",
            "description": "Memory in MB",
            "default": 128
          },
          "disk_size": {
            "type": "integer",
            "title": "Disk Size",
            "description": "Size of the disk in MB",
            "default": 700
          },
          "digest": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Digest",
            "description": "User provided digest of the snapshot content"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": { "type": "string" },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Metadata",
            "description": "Set of key-value pairs for storing additional information"
          }
        },
        "type": "object",
        "title": "CreateSnapshotRequest",
        "examples": [
          {
            "disk_size": 700,
            "image_id": "morphvm-minimal",
            "memory": 128,
            "metadata": {},
            "readiness_check": { "timeout": 5.0, "type": "timeout" },
            "vcpus": 1
          }
        ]
      },
      "CreateSnapshotTokenResponse": {
        "properties": {
          "token": { "type": "string", "title": "Token" },
          "expires_in": { "type": "integer", "title": "Expires In" }
        },
        "type": "object",
        "required": ["token", "expires_in"],
        "title": "CreateSnapshotTokenResponse"
      },
      "ExecRequest": {
        "properties": {
          "command": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Command"
          }
        },
        "type": "object",
        "required": ["command"],
        "title": "InstanceExecRequest",
        "examples": [{ "command": ["echo", "Hello, World!"] }]
      },
      "ExecResponse": {
        "properties": {
          "stdout": { "type": "string", "title": "Stdout" },
          "stderr": { "type": "string", "title": "Stderr" },
          "exit_code": { "type": "integer", "title": "Exit Code" }
        },
        "type": "object",
        "required": ["stdout", "stderr", "exit_code"],
        "title": "InstanceExecResponse"
      },
      "ExposeHttpServiceRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 40,
            "minLength": 1,
            "pattern": "^[a-z0-9]([a-z0-9-_]*[a-z0-9])?$",
            "title": "Name"
          },
          "port": {
            "type": "integer",
            "maximum": 65535.0,
            "minimum": 1.0,
            "title": "Port"
          },
          "auth_mode": {
            "anyOf": [
              { "$ref": "#/components/schemas/HttpServiceAuthMode" },
              { "type": "null" }
            ],
            "description": "Authentication mode for the HTTP service",
            "default": "none"
          }
        },
        "type": "object",
        "required": ["name", "port"],
        "title": "ExposeHttpServiceRequest",
        "examples": [{ "name": "web", "port": 8000 }]
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HttpServiceAuthMode": {
        "type": "string",
        "enum": ["none", "api_key"],
        "title": "HttpServiceAuthMode"
      },
      "ImageModel": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the base image, like img_xxxx"
          },
          "object": {
            "type": "string",
            "const": "image",
            "title": "Object",
            "description": "Object type, always 'image'",
            "default": "image"
          },
          "created": {
            "type": "integer",
            "title": "Created",
            "description": "Unix timestamp of when the base image was created"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the base image"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "Description of the base image"
          },
          "disk_size": {
            "type": "integer",
            "title": "Disk Size",
            "description": "Size of the base image in bytes"
          }
        },
        "type": "object",
        "required": ["id", "created", "name", "disk_size"],
        "title": "Image"
      },
      "ImageModelCollection": {
        "properties": {
          "object": {
            "type": "string",
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "data": {
            "items": { "$ref": "#/components/schemas/ImageModel" },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ImageList"
      },
      "InstanceExpireAction": {
        "type": "string",
        "enum": ["stop", "pause"],
        "title": "InstanceExpireAction"
      },
      "InstanceHttpService": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "port": { "type": "integer", "title": "Port" },
          "url": { "type": "string", "title": "Url" },
          "auth_mode": {
            "$ref": "#/components/schemas/HttpServiceAuthMode",
            "default": "none"
          }
        },
        "type": "object",
        "required": ["name", "port", "url"],
        "title": "InstanceHttpService"
      },
      "InstanceModel": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "object": {
            "type": "string",
            "const": "instance",
            "title": "Object",
            "default": "instance"
          },
          "created": { "type": "integer", "title": "Created" },
          "status": {
            "$ref": "#/components/schemas/InstanceStatus",
            "default": "pending"
          },
          "spec": { "$ref": "#/components/schemas/ResourceSpec" },
          "refs": { "$ref": "#/components/schemas/InstanceRefs" },
          "networking": { "$ref": "#/components/schemas/InstanceNetworking" },
          "metadata": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Metadata",
            "description": "User provided metadata for the instance"
          },
          "ttl": {
            "$ref": "#/components/schemas/InstanceTTL",
            "description": "Time to live settings for the instance. If not set, the instance will not expire."
          },
          "wake_on": {
            "$ref": "#/components/schemas/InstanceWakeOn",
            "description": "Wake on settings for the instance. If not set, the instance will not wake on access."
          }
        },
        "type": "object",
        "required": [
          "id",
          "created",
          "spec",
          "refs",
          "networking",
          "ttl",
          "wake_on"
        ],
        "title": "Instance"
      },
      "InstanceModelCollection": {
        "properties": {
          "object": {
            "type": "string",
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "data": {
            "items": { "$ref": "#/components/schemas/InstanceModel" },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "InstanceList"
      },
      "InstanceNetworking": {
        "properties": {
          "internal_ip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Internal Ip"
          },
          "http_services": {
            "items": { "$ref": "#/components/schemas/InstanceHttpService" },
            "type": "array",
            "title": "Http Services"
          }
        },
        "type": "object",
        "title": "InstanceNetworking"
      },
      "InstanceRefs": {
        "properties": {
          "snapshot_id": { "type": "string", "title": "Snapshot Id" },
          "image_id": { "type": "string", "title": "Image Id" }
        },
        "type": "object",
        "required": ["snapshot_id", "image_id"],
        "title": "InstanceRefs"
      },
      "InstanceSshKey": {
        "properties": {
          "object": {
            "type": "string",
            "const": "instance_ssh_key",
            "title": "Object",
            "default": "instance_ssh_key"
          },
          "private_key": { "type": "string", "title": "Private Key" },
          "public_key": { "type": "string", "title": "Public Key" },
          "password": { "type": "string", "title": "Password" }
        },
        "type": "object",
        "required": ["private_key", "public_key", "password"],
        "title": "InstanceSshKey"
      },
      "InstanceStatus": {
        "type": "string",
        "enum": ["pending", "ready", "paused", "saving", "error"],
        "title": "InstanceStatus"
      },
      "InstanceTTL": {
        "properties": {
          "ttl_seconds": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Ttl Seconds",
            "description": "Time to live in seconds for the instance"
          },
          "ttl_expire_at": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Ttl Expire At",
            "description": "Unix timestamp of when the instance will expire"
          },
          "ttl_action": {
            "$ref": "#/components/schemas/InstanceExpireAction",
            "description": "Action to take when the instance expires"
          }
        },
        "type": "object",
        "required": ["ttl_seconds", "ttl_action"],
        "title": "InstanceTTL"
      },
      "InstanceWakeOn": {
        "properties": {
          "wake_on_ssh": {
            "type": "boolean",
            "title": "Wake On Ssh",
            "description": "Whether to wake the instance on SSH access",
            "default": false
          },
          "wake_on_http": {
            "type": "boolean",
            "title": "Wake On Http",
            "description": "Whether to wake the instance on HTTP access",
            "default": false
          }
        },
        "type": "object",
        "title": "InstanceWakeOn"
      },
      "ResourceSpec": {
        "properties": {
          "vcpus": {
            "type": "integer",
            "title": "Vcpus",
            "description": "VCPU Count of the snaphshot"
          },
          "memory": {
            "type": "integer",
            "title": "Memory",
            "description": "Memory of the snaphshot in megabytes"
          },
          "disk_size": {
            "type": "integer",
            "title": "Disk Size",
            "description": "Size of the snapshot in megabytes"
          }
        },
        "type": "object",
        "required": ["vcpus", "memory", "disk_size"],
        "title": "ResourceSpec"
      },
      "SnapshotInstanceRequest": {
        "properties": {
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": { "type": "string" },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "title": "SnapshotInstanceRequest",
        "examples": [{ "metadata": {} }]
      },
      "SnapshotModel": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the snapshot, like snapshot_xxxx"
          },
          "object": {
            "type": "string",
            "const": "snapshot",
            "title": "Object",
            "description": "Object type, always 'snapshot'",
            "default": "snapshot"
          },
          "created": {
            "type": "integer",
            "title": "Created",
            "description": "Unix timestamp of when the snapshot was created"
          },
          "status": {
            "$ref": "#/components/schemas/SnapshotStatus",
            "description": "Status of the snapshot"
          },
          "spec": { "$ref": "#/components/schemas/ResourceSpec" },
          "refs": { "$ref": "#/components/schemas/SnapshotRefs" },
          "digest": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Digest",
            "description": "User provided digest of the snapshot content. Useful for caching if the snapshot takes a long time to create."
          },
          "metadata": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Metadata",
            "description": "User provided metadata for the snapshot"
          }
        },
        "type": "object",
        "required": ["id", "created", "status", "spec", "refs"],
        "title": "Snapshot"
      },
      "SnapshotModelCollection": {
        "properties": {
          "object": {
            "type": "string",
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "data": {
            "items": { "$ref": "#/components/schemas/SnapshotModel" },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "SnapshotList"
      },
      "SnapshotRefs": {
        "properties": { "image_id": { "type": "string", "title": "Image Id" } },
        "type": "object",
        "required": ["image_id"],
        "title": "SnapshotRefs"
      },
      "SnapshotStatus": {
        "type": "string",
        "enum": ["pending", "ready", "failed", "deleting", "deleted"],
        "title": "SnapshotStatus"
      },
      "StartInstanceRequest": {
        "properties": {
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": { "type": "string" },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Metadata"
          },
          "ttl_seconds": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Ttl Seconds",
            "description": "Time to live in seconds for the instance"
          },
          "ttl_action": {
            "anyOf": [
              { "type": "string", "enum": ["stop", "pause"] },
              { "type": "null" }
            ],
            "title": "Ttl Action",
            "description": "Action to take when the instance expires. Defaults to 'stop'."
          }
        },
        "type": "object",
        "title": "StartInstanceRequest",
        "examples": [{ "metadata": {} }]
      },
      "TimeoutCheck": {
        "properties": {
          "type": {
            "type": "string",
            "const": "timeout",
            "title": "Type",
            "default": "timeout"
          },
          "timeout": { "type": "number", "title": "Timeout", "default": 10.0 }
        },
        "type": "object",
        "title": "TimeoutCheck"
      },
      "UpdateSSHKeyRequest": {
        "properties": {
          "public_key": { "type": "string", "title": "Public Key" }
        },
        "type": "object",
        "required": ["public_key"],
        "title": "UpdateSSHKeyRequest",
        "examples": [{ "public_key": "ssh-rsa AAAA..." }]
      },
      "UpdateTTLRequest": {
        "properties": {
          "ttl_seconds": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Ttl Seconds",
            "description": "New TTL in seconds. To clear TTL pass null."
          },
          "ttl_action": {
            "anyOf": [
              { "type": "string", "enum": ["stop", "pause"] },
              { "type": "null" }
            ],
            "title": "Ttl Action",
            "description": "Action to take when the instance expires. Defaults to the current action or 'stop'."
          }
        },
        "type": "object",
        "required": ["ttl_seconds"],
        "title": "UpdateTTLRequest"
      },
      "UpdateWakeRequest": {
        "properties": {
          "wake_on_http": {
            "type": "boolean",
            "title": "Wake On Http",
            "description": "Whether to wake the instance on HTTP request",
            "default": false
          },
          "wake_on_ssh": {
            "type": "boolean",
            "title": "Wake On Ssh",
            "description": "Whether to wake the instance on SSH request",
            "default": false
          }
        },
        "type": "object",
        "title": "UpdateWakeRequest"
      },
      "UserInstanceUsageModel": {
        "properties": {
          "instance_cpu_time": {
            "type": "integer",
            "title": "Instance Cpu Time"
          },
          "instance_memory_time": {
            "type": "integer",
            "title": "Instance Memory Time"
          },
          "instance_disk_time": {
            "type": "integer",
            "title": "Instance Disk Time"
          },
          "period_start": { "type": "integer", "title": "Period Start" },
          "period_end": { "type": "integer", "title": "Period End" }
        },
        "type": "object",
        "required": [
          "instance_cpu_time",
          "instance_memory_time",
          "instance_disk_time",
          "period_start",
          "period_end"
        ],
        "title": "UserInstanceUsage"
      },
      "UserSSHKeyModel": {
        "properties": {
          "public_key": { "type": "string", "title": "Public Key" },
          "created": { "type": "integer", "title": "Created" }
        },
        "type": "object",
        "required": ["public_key", "created"],
        "title": "UserSSHKey"
      },
      "UserSnapshotUsageModel": {
        "properties": {
          "snapshot_memory_time": {
            "type": "integer",
            "title": "Snapshot Memory Time"
          },
          "snapshot_disk_time": {
            "type": "integer",
            "title": "Snapshot Disk Time"
          },
          "period_start": { "type": "integer", "title": "Period Start" },
          "period_end": { "type": "integer", "title": "Period End" }
        },
        "type": "object",
        "required": [
          "snapshot_memory_time",
          "snapshot_disk_time",
          "period_start",
          "period_end"
        ],
        "title": "UserSnapshotUsage"
      },
      "UserUsageOverviewModel": {
        "properties": {
          "instance": {
            "items": { "$ref": "#/components/schemas/UserInstanceUsageModel" },
            "type": "array",
            "title": "Instance"
          },
          "snapshot": {
            "items": { "$ref": "#/components/schemas/UserSnapshotUsageModel" },
            "type": "array",
            "title": "Snapshot"
          },
          "items": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Items"
          }
        },
        "type": "object",
        "required": ["instance", "snapshot", "items"],
        "title": "UserUsageOverview"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      }
    },
    "securitySchemes": { "HTTPBearer": { "type": "http", "scheme": "bearer" } }
  },
  "servers": [{ "url": "/api", "description": "MorphVM API" }]
}
